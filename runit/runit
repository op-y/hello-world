#!/bin/bash
#
# Author: op-y
# Date: 2016/2/1
# Brief:
#   Launch the processes provided by proc file.
# Globals:
#   VERSION
#   PORT
#   PROC_FILE
#   ENV_FILE
#   SUBPROCESSES
#   CHECK_OK
#   PARAMETER_ERROR
#   FILE_CHECK_ERROR
#   PROC_CHECK_FAIL
#   ENV_CHECK_FAIL
# Arguments:
#   profile
#   envfile
# Return:
#   None

# set
set -e
set -u
set -o pipefail

# global variables
VERSION="1.0"
PORT=8080
PROC_FILE=""
ENV_FILE=""

declare -a SUBPROCESSES=()
readonly CHECK_OK=0
readonly PARAMETER_ERROR=1
readonly FILE_CHECK_ERROR=2
readonly PROC_CHECK_FAIL=3
readonly ENV_CHECK_FAIL=4

# trap
trap "_kill_subprocesses" SIGINT SIGTERM

# usage
function usage() {
    echo "Usage: runit [-c] [-f procfile|Procfile] [-e envfile|.env]"
    echo "Options:"
    echo "        -h|--help"
    echo "        -v|--version"
    echo "        -c|--check       check proc and evn file"
    echo "        -p|--procfile    customize proc file"
    echo "        -e|--envfile     customize env file"
}

# version
function show_version() {
    echo "runit: Version ${VERSION}"
}

# kill subprocesses
function _kill_subprocesses() {
    kill -TERM "${SUBPROCESSES[@]}"
    if [[ 0 -ne "$?" ]];then
        return 1
    else
        return 0
    fi
}

#################################################
# Brief:
#   Check then contents in procfile and env file
# Globals:
#   PROC_FILE
#   ENV_FILE
# Arguments:
#   None
# Returns:
#   None
#################################################
function verify() {
    if [[ ! -z "${PROC_FILE}" ]];then
        :
    elif [[ -f ./Procfile ]];then
        PROC_FILE="./Procfile"
    else
        exit "${PROC_CHECK_FAIL}"
    fi

    if [[ ! -z "${ENV_FILE}" ]];then
        :
    elif [[ -f ./.env ]];then
        ENV_FILE="./.env"
    else
        :
    fi

    local proc_check_result="${CHECK_OK}"
    local env_check_result="${CHECK_OK}"
    local line_num=0

    while read line || [[ -n "${line}" ]];do
        line_num=$((line_num+1))
        if echo "${line}" | grep -q "^#";then
            continue
        elif echo "${line}" | grep -q "^$";then
            continue
        fi

        if ! echo "${line}" | grep -q ":";then
            echo "Config format error: proc_file line ${line_num} no_colon_command"
            proc_check_result="${PROC_CHECK_FAIL}"
        else
            local proc_name="${line%%:*}"
            if echo "${proc_name}" | grep -q "[^a-zA-Z0-9_]";then
                echo "Config format error: proc_file line ${line_num} invalid_char"
                proc_check_result="${PROC_CHECK_FAIL}"
            fi
        fi
    done < "${PROC_FILE}"

    line_num=0
    if [[ -f "${ENV_FILE}" ]];then
        while read line || [[ -n "${line}" ]];do
            line_num=$((line_num+1))
            if echo "${line}" | grep -q "^#";then
                continue
            elif echo "${line}" | grep -q "^$";then
                continue
            fi

            if ! echo "${line}" | grep -q "=";then
                echo "Config format error: env_file line ${line_num} no_equal_mark"
                env_check_result="${ENV_CHECK_FAIL}"
            else
                local env_name="${line%%=*}"
                local env_value="${line#*=}"
                if echo "${env_name}" | grep -q "[^a-zA-Z0-9_]";then
                echo "Config format error: env_file line ${line_num} invalid_char"
                    env_check_result="${ENV_CHECK_FAIL}"
                fi

                if echo "${env_value}" | grep -q " ";then
                    echo "Config format error: env_file line ${line_num} value_have_space"
                    env_check_result="${ENV_CHECK_FAIL}"
                fi
            fi
        done < "${ENV_FILE}"
    fi

    if [[ 0 -ne "${proc_check_result}" || 0 -ne "${env_check_result}" ]] ;then
        exit "${FILE_CHECK_ERROR}"
    else
        exit "${CHECK_OK}"
    fi
}

#################################################
# Brief:
#   Print log message on the screen.
# Globals:
#   PARAMETER_ERROR
# Arguments:
#   $1: proc_name
#   $2: proc_message
#   $3: proc_pid
# Returns:
#   None
#################################################
function log() {
    if [[ $# -ne 3 ]];then
        exit "${PARAMETER_ERROR}"
    fi

    local proc_name="$1"
    local proc_message="$2"
    local proc_pid="$3"
    local proc_time="$(date +%H:%M:%S)"

    local color_selected=''
    local color_default="\E[0m"
    local red="\E[31m"
    local green="\E[32m"
    local yellow="\E[33m"
    local blue="\E[34m"

    local name_length="${#proc_name}"
    local option=$((name_length%4))
    case "${option}" in
        0) color_selected="${red}" ;;
        1) color_selected="${green}" ;;
        2) color_selected="${yellow}" ;;
        3) color_selected="${blue}" ;;
        *) color_selected="${color_default}" ;;
    esac

    printf "${color_selected}%s %-7s| ${color_default}%s %s\n" "${proc_time}" "${proc_name}" "${proc_message}" "${proc_pid}"
}

#################################################
# Brief:
#   Execute command defined by proc_command.
# Globals:
#   SUBPROCESSES
#   PARAMTER_ERROR
# Arguments:
#   $1: proc_name
#   $2: proc_command
# Returns:
#   None
#################################################
function run_command() {
    local proc_name
    local proc_command
    local proc_pid
    local proc_command_real

    if [[ $# -ne 2 ]];then
        exit "${PARAMETER_ERROR}"
    else
        proc_name="$1"
        proc_command="$2"
    fi

    bash -c "${proc_command}" 1> >(
        while read line;do
            log "${proc_name}" "${line}" ""
        done
    ) 2>&1 &
    proc_pid="$!"
    set +u
    proc_command_real=$(eval "echo \"${proc_command}\"")
    set -u
    log "${proc_name}" "${proc_command_real}" "started with pid ${proc_pid}"	

    if echo "${proc_command}" | grep -q "\$PORT";then
        PORT=$((PORT+1))
    fi

    if [[ -z "${SUBPROCESSES:-}" ]];then
        SUBPROCESSES=("${proc_pid}")
    else
        SUBPROCESSES=("${SUBPROCESSES[@]}" "${proc_pid}")
    fi
}

#################################################
# Brief:
#   Load env file.
# Globals:
#   ENV_FILE
# Arguments:
#   None
# Returns:
#   None
#################################################
function load_env_file() {
    set -a
    if [[ -f "${ENV_FILE}" ]];then
        source "${ENV_FILE}"
    elif [[ -f ./.env ]];then
        source ./.env
    else
        :
    fi
    export PORT
    set +a
}

#################################################
# Brief:
#    Read each command from proc file and run it.
# Globals:
#    PROC_FILE
# Arguments:
#    None
# Returns:
#    None
#################################################
function run_procfile() {
    if [[ ! -z "${PROC_FILE}" ]];then
        :
    elif [[ -f ./Procfile ]];then
        PROC_FILE="./Procfile"
    else
        exit "${PROC_CHECK_FAIL}"
    fi

    while read line || [[ -n "${line}" ]] ;do
        if echo "${line}" | grep -q "^#";then
            continue
        elif echo "${line}" | grep -q "^$" ;then
            continue
        else
            local proc_name="${line%%:*}"
            local proc_command="${line#*:}"
            run_command "${proc_name}" "${proc_command}"
        fi
    done < "${PROC_FILE}"
    wait
}

# main
function main() {
    local check_flag=0
    while getopts ':hvce:f:' option;do
        case "${option}" in
            h)
                usage
                exit 0
                ;;
            v)
                show_version
                exit 0
                ;;
            c)
                check_flag=1
                ;;
            e)
                ENV_FILE="${OPTARG}"
                ;;
            f)
                PROC_FILE="${OPTARG}"
                ;;
            *)
                usage
                exit 1
                ;;
        esac
    done

    if [[ 1 -eq "${check_flag}" ]];then
        verify
    fi

    load_env_file
    run_procfile
}

main "$@"
