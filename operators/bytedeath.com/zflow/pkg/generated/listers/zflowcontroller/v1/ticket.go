/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "bytedeath.com/zflow/pkg/apis/zflowcontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TicketLister helps list Tickets.
// All objects returned here must be treated as read-only.
type TicketLister interface {
	// List lists all Tickets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Ticket, err error)
	// Tickets returns an object that can list and get Tickets.
	Tickets(namespace string) TicketNamespaceLister
	TicketListerExpansion
}

// ticketLister implements the TicketLister interface.
type ticketLister struct {
	indexer cache.Indexer
}

// NewTicketLister returns a new TicketLister.
func NewTicketLister(indexer cache.Indexer) TicketLister {
	return &ticketLister{indexer: indexer}
}

// List lists all Tickets in the indexer.
func (s *ticketLister) List(selector labels.Selector) (ret []*v1.Ticket, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Ticket))
	})
	return ret, err
}

// Tickets returns an object that can list and get Tickets.
func (s *ticketLister) Tickets(namespace string) TicketNamespaceLister {
	return ticketNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TicketNamespaceLister helps list and get Tickets.
// All objects returned here must be treated as read-only.
type TicketNamespaceLister interface {
	// List lists all Tickets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Ticket, err error)
	// Get retrieves the Ticket from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Ticket, error)
	TicketNamespaceListerExpansion
}

// ticketNamespaceLister implements the TicketNamespaceLister
// interface.
type ticketNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Tickets in the indexer for a given namespace.
func (s ticketNamespaceLister) List(selector labels.Selector) (ret []*v1.Ticket, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Ticket))
	})
	return ret, err
}

// Get retrieves the Ticket from the indexer for a given namespace and name.
func (s ticketNamespaceLister) Get(name string) (*v1.Ticket, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("ticket"), name)
	}
	return obj.(*v1.Ticket), nil
}
